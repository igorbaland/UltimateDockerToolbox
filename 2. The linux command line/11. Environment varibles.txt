Just like we have variables in our programming languages
	In linux we have the
		environment variables
			which we can set for storing configuration 
				settings or our applications
Our application can read confguration settings from these environment variables



Viewing environment variables
	
	1. printenv		#all the environment variables on this machine			!!!!!!!!!
		1. hostname, which is set to id our container
			id container is generated by docker automatically
		2. pwd
		3. home
			...
		path, very importen variable
		Path
			Sometimes, when we run a program from the command line, we get an error saying
			the program or the command was not found
			even though we have installed that program
			Quite often, that happens because our OS, whatever it's Linux or Windows, cannot find that program
			To find a program, our OS is not going to go throught our entire hard drive
				is only going to look at specific dir
				And these dir are specified using the
					PATH varible
				This is set to a list of directories separated by by colon
					PATH=usr/local/sbin:user/local/bin:usr/sbin:
						...
	
	2.a) printenv PATH		#to see particular variables
							#everything is case sensivity, PATH
	
	2.b) echo $PATH				#another way to see partivular variables
	
	3. #setting a variable using a export command				!!!!!!!!!!
		export DB_USER=mosh			#this variable is stored in the current session, in the current terminal session
		
		#read
			echo $DB_USER
				mosh
			printenv DB_USER
				mosh
				this variable is only available in the CURRENT TEMINAL SESSION
					if we close this terminal session and open a new terimnal session
						this variable will not exist
				
				#terminate a session
					exit
						Now we are outside of our container environment
				
				#to see all the docker processes or containers/verify exit
					docker ps
							
						docker ps -a 	#-a, to see all containers 
						
				#start a container
					docker start -i	2f7		#-i, we can interact with it, and type containerId #we don't need to type the full Id, 
					
					#get environment variables
						echo $DB_USER
							doesn't exist
							
	4. #to make variable persistent, we have to write it to 
		a special file
		
		#home directory
			cd ~
			
		#list all the files, including hidden files
			ls -a
				BASHRC (bashrc)		#file						!!!!!!!!!!!!
					this file is the users personal startup file. 
						Every time a user logs in 
							Linux loads this command from the users home directory.
				This is where we have to write permanent environment variables 	

		#eding a file 
			#using nano
				nano .bashrc
			
			#another technique
				echo DB_USER=mosh >	.bashrc			#> redirect the result
					#don't execute this yet
						because if we do this,
							we will overwrite 
								the entire bashrc file						!!!!!!!!!!!!!
						we don't want to overwrite, we want to append something to it.
					
					#append without overwriting bashrc file							!!!!!!!!!!!!!
						echo DB_USER=mosh >> .bashrc
						
						#verify our work
							cat .bashrc
								#the last line contains
									DB_USER=mosh
		#One thing we want to empasize here
			we shuolud never store the sensitive information in
				environment variables, because of the end of the day, 
					these variables are stored in 
						plain file text
			We don't want to store  DB passord here,
				because anyone who has access to this machine can read the DB_PASSWORD
				
		#verify, close the container
			exit
			
			#open a new terminal session
				docker ps -a		//list all the stopp IdContainers
				
				#start container
					docker start -i 2f7
					
				echo $DB_USER
				
The changes we make to bashrc file are only effective
	in the next terminal session				#restart server			!!!!!!!!
	If we write another variable here, that variable is not going to be able
		until we open another terminal session
		
		#home directory
			cd ~
				echo COLOR=blue	>> .bashrc
				echo $COLOR
					nothing hapenned
					
					bashrc is only loaded once  
						when we start a terminal sessions
						
					Solutions
					1. terminate the session and come back in
					2. source .bashrc								#source command, to reload the bashrc file !!!!!!!!!
						#and we have to execute source command, from our home derictory
							#if we are not in home directory
								#we can type
									source ~/.bashrc
									
									#verify
										echo $COLOR
											blue
						
							